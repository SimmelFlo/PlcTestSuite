<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="TestSuite" Id="{d93a9aa9-034f-4b1b-8d51-f63a960f5d15}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TestSuite 
VAR_GENERIC CONSTANT
    _MaxTestCount : DINT := 10;
END_VAR
IMPLEMENTS I_TestSuite
VAR
    _TestSuiteName    : STRING;
	TestCollection	  : ARRAY[0.._MaxTestCount] OF Test;
	NoAction		  : Test := (TestId := 'No Action', State := E_TestStatus.DoneOk);
	ActiveTest		  : DINT;
	DoneMessage		  : FB_TcMessage;
    Source            : FB_TcSourceInfo;
	TotalTestCount	  : UDINT := 0;
	TotalOkTestCount  : UDINT := 0;
	TotalNokTestCount : UDINT := 0;
	Complete		  : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="ReRunIndividualTest" Id="{62f6cae7-bfe8-4b44-a2ef-a751a8e71733}">
      <Declaration><![CDATA[METHOD ReRunIndividualTest
VAR_INPUT
	TestId : T_MaxString;
END_VAR
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO _MaxTestCount DO
	IF TestCollection[i].TestId = TestId THEN
		TestCollection[i].State := E_TestStatus.Init;
		ActiveTest := i;
		Complete := FALSE;
		EXIT;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReRunTests" Id="{149633ad-ed2c-4a71-a7a5-f2bfddf8a7a2}">
      <Declaration><![CDATA[METHOD ReRunTests
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO TestSuiteParameter.MaxTestCount DO
	TestCollection[i].State := E_TestStatus.Init;
	ActiveTest				:= 0;
	Complete				:= FALSE;
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test" Id="{ed26b7b3-1fa1-4dc2-9f0d-d0fab78d1679}">
      <Declaration><![CDATA[METHOD Test : I_TestOperation
VAR_INPUT
	TestId : T_MaxString;
END_VAR

VAR
	ResultString : T_MaxString;
	i			 : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _TestSuiteName = '' THEN
	_TestSuiteName := __POUNAME();
END_IF

IF NOT Complete THEN
	FOR i := 0 TO _MaxTestCount DO
		TestCollection[i].TestSuiteName := _TestSuiteName;

		// Detect first running test
		IF TestCollection[i].State = E_TestStatus.Running THEN
			ActiveTest := i;
		END_IF

		IF TestCollection[ActiveTest].State >= E_TestStatus.DoneOk THEN
			ActiveTest := 0;
		END_IF

		// Get existing Test
		IF (TestCollection[i].TestId = TestId) THEN
			IF (ActiveTest = i) OR (ActiveTest = 0) THEN
				Test := TestCollection[i];
			ELSE
				Test := NoAction;
			END_IF

			EXIT;
		END_IF

		// Add Test
		IF TestCollection[i].TestId = '' THEN
			TestCollection[i].TestId := TestId;
			Test					 := NoAction;
			EXIT;
		END_IF

		// Out of tests
		IF i = _MaxTestCount THEN
			Test		 := NoAction;
			Source.sName := _TestSuiteName;
			DoneMessage.Create(eventClass	:= TC_EVENT_CLASSES.TestEvents,
							   nEventId		:= 1,
							   eSeverity	:= TcEventSeverity.Error,
							   ipSourceInfo := Source);

			ResultString := CONCAT('Test not added, max Tests exeeded - ', TO_STRING(_MaxTestCount));
			DoneMessage.ipArguments.AddString(ResultString);
			DoneMessage.Send(0);
			Source.Clear();
			DoneMessage.Release();
			Complete := TRUE;
		END_IF
	END_FOR

	// Run Statistic
	TotalTestCount	  := 0;
	TotalOkTestCount  := 0;
	TotalNokTestCount := 0;
	FOR i := 0 TO _MaxTestCount DO
		IF TestCollection[i].TestId <> '' THEN
			TotalTestCount := TotalTestCount + 1;
			IF TestCollection[i].State = E_TestStatus.DoneOk THEN
				TotalOkTestCount := TotalOkTestCount + 1;
			END_IF

			IF TestCollection[i].State = E_TestStatus.DoneFailed THEN
				TotalNokTestCount := TotalNokTestCount + 1;
			END_IF
		END_IF
	END_FOR

	// Tests finished
	IF (TotalTestCount = (TotalOkTestCount + TotalNokTestCount)) AND NOT Complete THEN
		Source.sName := _TestSuiteName;
		DoneMessage.Create(eventClass	:= TC_EVENT_CLASSES.TestEvents,
						   nEventId		:= 1,
						   eSeverity	:= TcEventSeverity.Error,
						   ipSourceInfo := Source);

		ResultString := CONCAT('Completed - ', CONCAT('Total Tests - ', TO_STRING(TotalTestCount)));
		ResultString := CONCAT(ResultString, CONCAT(', OK Tests - ', TO_STRING(TotalOkTestCount)));
		ResultString := CONCAT(ResultString, CONCAT(', Failed Tests - ', TO_STRING(TotalNokTestCount)));
		DoneMessage.ipArguments.AddString(ResultString);
		DoneMessage.Send(0);
		Source.Clear();
		DoneMessage.Release();
		Complete := TRUE;
	END_IF
ELSE
	Test := NoAction;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="TestSuiteName" Id="{f585ae52-04ec-4c7c-ae12-2980c5f2d3ed}">
      <Declaration><![CDATA[PROPERTY TestSuiteName : String]]></Declaration>
      <Set Name="Set" Id="{7a5fbab5-b375-4a82-a951-31e34b901e54}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_TestSuiteName := TestSuiteName;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>